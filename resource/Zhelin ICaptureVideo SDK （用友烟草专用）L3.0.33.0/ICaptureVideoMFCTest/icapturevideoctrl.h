 #pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CIcapturevideoctrl wrapper class

class CIcapturevideoctrl : public CWnd
{
protected:
	DECLARE_DYNCREATE(CIcapturevideoctrl)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x9A73DB73, 0x2CA3, 0x478D, { 0x9A, 0x3F, 0x7E, 0x9D, 0x6A, 0x8D, 0x32, 0x7C } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DICaptureVideo

// Functions
//

	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long InitDevice()
	{
		long result;
		InvokeHelper(0x1, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long StartDevice(LPCTSTR szDeviceIndex)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeviceIndex);
		return result;
	}
	long StopDevice(LPCTSTR szDeviceIndex)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeviceIndex);
		return result;
	}
	void ReleaseDevice()
	{
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetDeviceCount()
	{
		long result;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	CString GetVersion()
	{
		CString result;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long SetResolution(LPCTSTR szDeviceIndex, LPCTSTR szResolutionWidth, LPCTSTR szResolutionHeight)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeviceIndex, szResolutionWidth, szResolutionHeight);
		return result;
	}
	CString GetResolution(LPCTSTR szDeviceIndex)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, szDeviceIndex);
		return result;
	}
	long SetDeviceAngle(LPCTSTR szDeviceIndex, LPCTSTR szDeviceAngle)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeviceIndex, szDeviceAngle);
		return result;
	}
	long SetCutPageType(LPCTSTR szDeviceIndex, LPCTSTR szCutPageTypeIndex)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeviceIndex, szCutPageTypeIndex);
		return result;
	}
	long SetColorMode(LPCTSTR szDeviceIndex, LPCTSTR szColorModeIndex)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeviceIndex, szColorModeIndex);
		return result;
	}
	long CaptureImage(LPCTSTR szDeviceIndex, LPCTSTR szFileName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeviceIndex, szFileName);
		return result;
	}
	long SetImagePara(LPCTSTR szDeviceIndex, LPCTSTR szImageParaType, LPCTSTR szImageParaValue)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeviceIndex, szImageParaType, szImageParaValue);
		return result;
	}
	long StartRecordingVideo(LPCTSTR szDeviceIndex, LPCTSTR szFileName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeviceIndex, szFileName);
		return result;
	}
	long StopRecodingVideo(LPCTSTR szDeviceIndex)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeviceIndex);
		return result;
	}
	CString ReadIDCard(LPCTSTR szPhotoFileName)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, szPhotoFileName);
		return result;
	}
	long FaceVertify(LPCTSTR szFaceImage1FileName, LPCTSTR szFaceImage2FileName)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szFaceImage1FileName, szFaceImage2FileName);
		return result;
	}
	CString EncodeBase64(LPCTSTR szFileName)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, szFileName);
		return result;
	}
	CString RecognizeBarcode(LPCTSTR szFileName)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, szFileName);
		return result;
	}
	CString GetDeviceDetails()
	{
		CString result;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long MakeMultiPageFile(LPCTSTR szFileName, LPCTSTR szPageNumber, LPCTSTR szFlag)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR;
		InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szFileName, szPageNumber, szFlag);
		return result;
	}
	long Merge2Images(LPCTSTR szFile1Name, LPCTSTR szFile2Name, LPCTSTR szResultFileName, LPCTSTR szMergeType)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szFile1Name, szFile2Name, szResultFileName, szMergeType);
		return result;
	}
	long StartLivingRecognize(LPCTSTR szDeveceIdx, LPCTSTR szDetectType, LPCTSTR szTimeOut)
	{
		long result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, parms, szDeveceIdx, szDetectType, szTimeOut);
		return result;
	}
// Properties
//



};
